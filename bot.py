import logging
import os
from datetime import date, datetime, timedelta
from io import BytesIO

from aiogram.types.message import ContentType
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from aiogram.utils.exceptions import MessageToDeleteNotFound, MessageCantBeDeleted
from aiogram.utils.executor import start_webhook
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputFile, InputMediaPhoto
from aiogram import Bot, types

from tgbot.utiles.Statistics import statistics, pictureNoData
from tgbot.utiles import database, chatGPT
from config import config
from tgbot.utiles.supportFunctions import converting_dates_to_days, contains_emojis

bot = Bot(token=config.BOT_TOKEN.get_secret_value())
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

WEBHOOK_HOST = config.WEBHOOK_HOST
WEBHOOK_PATH = f'/webhook/{config.BOT_TOKEN.get_secret_value()}'
WEBHOOK_URL = f'{WEBHOOK_HOST}{WEBHOOK_PATH}'

WEBAPP_HOST = config.WEBAPP_HOST
WEBAPP_PORT = config.WEBAPP_PORT


class UserState(StatesGroup):
    limit_is_over = State()
    personal_smile_add = State()
    personal_smile_remove = State()


async def on_startup(dispatcher):
    await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)
    await setUserStateFromDB()


async def on_shutdown(dispatcher):
    await bot.delete_webhook()


smileys = [
    "üòä", "üòÄ", "ü§™", "üòç", "üòÖ",
    "üòÜ", "üòâ", "üòå", "üòé", "üòè",
    "ü§î", "üòí", "üòî", "üòï", "üòñ",
    "ü§¢", "üòü", "üò†", "üò°", "üò¢",
    "üò£", "üò•", "üò™", "üò´", "üò¥"]

"""—Å–ø–∏—Å–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫"""
buttons_menu = ["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–í—ã–±—Ä–∞—Ç—å —Å–º–∞–π–ª–∏–∫", "–î–æ–±–∞–≤–∏—Ç—å —Å–º–∞–π–ª–∏–∫", "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—Ç—Ä–µ—Ç", "–ü—Ä–µ–º–∏—É–º"]

buttons_stat = ["–î–µ–Ω—å", "–ù–µ–¥–µ–ª—è", "–ú–µ—Å—è—Ü", "–í—Å–µ –≤—Ä–µ–º—è", "–í–µ—Ä–Ω—É—Ç—å—Å—è"]
admin_menu = ["–ö–æ–ª-–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é", "–û–±—â–µ–µ –∫–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å",
              "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü", "–í—ã–π—Ç–∏"]
buttons_addSmileToMenu = ["–î–æ–±–∞–≤–∏—Ç—å", "–£–¥–∞–ª–∏—Ç—å", "–í–µ—Ä–Ω—É—Ç—å—Å—è"]

premium_list_default = ["1 –º–µ—Å—è—Ü", "6 –º–µ—Å—è—Ü–µ–≤", "1 –≥–æ–¥", "–í–µ—Ä–Ω—É—Ç—å—Å—è"]
premium_list_state = ["1 –º–µ—Å—è—Ü", "6 –º–µ—Å—è—Ü–µ–≤", "1 –≥–æ–¥"]


async def send_invoice(chat_id, time, price):
    prevInvoiceMsg = await database.getPrevInvoiceMsgID(chat_id)
    if prevInvoiceMsg is not None:
        await bot.delete_message(chat_id=chat_id, message_id=prevInvoiceMsg)

    PRICE = types.LabeledPrice(label=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {time}", amount=price * 100)
    Invoice = await bot.send_invoice(
        chat_id=chat_id,
        title='Premium Happy.do',
        description=f'–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {time}',
        provider_token=config.PAYMENTS_TOKEN.get_secret_value(),
        currency="rub",
        photo_url="https://info.sibnet.ru/ni/629/629577w_1669101196.jpg",
        photo_width=416,
        photo_height=234,
        photo_size=416,
        is_flexible=False,
        prices=[PRICE],
        start_parameter="",
        payload="test-invoice-payload"
    )
    await database.updateInvoiceMsgID(chat_id, Invoice["message_id"])


@dp.message_handler(text=["–ü—Ä–µ–º–∏—É–º"])
async def premium(message: types.Message, state: FSMContext):
    is_premium = await database.checkPremiumUser(message.from_user.id)
    premium_end = await database.checkPremiumIsEnd(message.from_user.id)
    if is_premium and not premium_end:
        await message.reply(await database.infoPremiumUser(message.from_user.id),
                            reply_markup=show_button(["–í–µ—Ä–Ω—É—Ç—å—Å—è"]))
    elif is_premium and premium_end:
        await premiumIsEnd(user_id=message.from_user.id, state=state)
    else:
        await message.reply('–í—ã–±–µ—Ä–∏ –Ω–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–º–∏—É–º', reply_markup=show_button(premium_list_default))


@dp.message_handler(text=['1 –º–µ—Å—è—Ü', '6 –º–µ—Å—è—Ü–µ–≤', '1 –≥–æ–¥'])
@dp.message_handler(state=UserState.limit_is_over)
async def buy(message: types.Message):
    if message.text == '1 –º–µ—Å—è—Ü':
        await delMessage(message.chat.id, message.message_id)
        await send_invoice(message.chat.id, '1 –º–µ—Å—è—Ü', price=100)
    elif message.text == '6 –º–µ—Å—è—Ü–µ–≤':
        await delMessage(message.chat.id, message.message_id)
        await send_invoice(message.chat.id, '6 –º–µ—Å—è—Ü–µ–≤', price=200)
    elif message.text == '1 –≥–æ–¥':
        await delMessage(message.chat.id, message.message_id)
        await send_invoice(message.chat.id, '1 –≥–æ–¥', price=500)


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n<b>Happy.d–æ</b> ‚Äì —ç—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º '
                         f'–æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å –ø–æ–º–æ—â—å—é —Å–º–∞–π–ª–∏–∫–æ–≤. –≠—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π '
                         f'–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —É–ª—É—á—à–∏—Ç—å –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ '
                         f'–∑–¥–æ—Ä–æ–≤—å–µ.', parse_mode='HTML')
    user_exists = await database.checkUser(message.from_user.id)
    if not user_exists:
        await database.createUser(message.from_user.id, message.from_user.username)
    await message.answer('–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç', reply_markup=show_button(buttons_menu))


@dp.message_handler(text=["–í–µ—Ä–Ω—É—Ç—å—Å—è"])
async def statisticUserBack(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç', reply_markup=show_button(buttons_menu))


# -----------------------------------------------------------------------------------------------------------------------
"""–°–∏—Å—Ç–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""


# -----------------------------------------------------------------------------------------------------------------------


@dp.message_handler(text=["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])
async def statisticUser(message: types.Message, state: FSMContext):
    user_id = message.from_user.id  # ID —á–∞—Ç–∞
    premium_end = await database.checkPremiumIsEnd(user_id)
    if premium_end:
        await premiumIsEnd(user_id=user_id, state=state)
    else:
        await message.answer('–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?', reply_markup=show_button(buttons_stat))


@dp.message_handler(text=["–î–µ–Ω—å"])
async def statisticUserDay(message: types.Message, state: FSMContext, day=str(date.today())):
    user_id = message.from_user.id  # ID —á–∞—Ç–∞
    premium_end = await database.checkPremiumIsEnd(user_id)
    if premium_end:
        await premiumIsEnd(user_id=user_id, state=state)
    else:
        pathToPicture = await statistics.analiticData(user_id, "day", day)  # –ø—É—Ç—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ —Å–æ —Å—Ç–∞—Ç–æ–π
        emoji_list = smileys + await database.getPersonalSmiles(user_id)
        picture = await statistics.analiticData(user_id, "day", day)  # –ø—É—Ç—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ —Å–æ —Å—Ç–∞—Ç–æ–π
        emoji_list = smileys + await database.getPersonalSmiles(user_id)

        if isinstance(picture, BytesIO):
            userSmiles = await database.getSmileInfo(user_id, day)
            sent_message = await message.answer_photo(photo=picture,
                                                      reply_markup=show_fake_inline_button(emoji_list, userSmiles))

            message_id = await database.getMessageId(user_id, "stat_day")
            if message_id is not None:
                try:
                    await bot.delete_message(chat_id=user_id, message_id=message_id)
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id}: {e}")
            message_id = sent_message.message_id
            await database.addMessageId(user_id, "stat_day", message_id)

        else:
            picture = pictureNoData.createPictureNoData(user_id, day)
            sent_message = await message.answer_photo(photo=picture,
                                                    reply_markup=show_fake_inline_button(emoji_list))

            message_id = await database.getMessageId(user_id, "stat_day")
            if message_id is not None:
                try:
                    await bot.delete_message(chat_id=user_id, message_id=message_id)
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id}: {e}")
            message_id = sent_message.message_id
            await database.addMessageId(user_id, "stat_day", message_id)

        picture = None  # –£–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä–µ–∫—Ç –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å



@dp.message_handler(text=["–ù–µ–¥–µ–ª—è"])
async def statisticUserWeek(message: types.Message, state: FSMContext):
    user_id = message.from_user.id  # ID —á–∞—Ç–∞
    premium_end = await database.checkPremiumIsEnd(user_id)
    if premium_end:
        await premiumIsEnd(user_id=user_id, state=state)
    else:
        picture = await statistics.analiticData(user_id, "week")  # –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å–æ —Å—Ç–∞—Ç–æ–π
        if isinstance(picture, BytesIO):
            # await message.answer("–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é")
            sent_message = await bot.send_photo(chat_id=message.chat.id, photo=picture)


            # message_id = await database.getMessageId(user_id, "stat_week")
            # if message_id is not None:
            #     try:
            #         await bot.delete_message(chat_id=user_id, message_id=message_id)
            #     except Exception as e:
            #         print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id}: {e}")
            # message_id = sent_message.message_id
            # await database.addMessageId(user_id, "stat_week", message_id)


            picture = None  # –£–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä–µ–∫—Ç –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
        else:
            await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –µ—â–µ –Ω–µ –≤–≤–µ–ª–∏ —Å–º–∞–π–ª–∏–∫–∏ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.")


@dp.message_handler(text=["–ú–µ—Å—è—Ü"])
async def statisticUserMonth(message: types.Message, state: FSMContext):
    user_id = message.from_user.id  # ID —á–∞—Ç–∞
    premium_end = await database.checkPremiumIsEnd(user_id)
    if premium_end:
        await premiumIsEnd(user_id=user_id, state=state)
    else:
        picture = await statistics.analiticData(user_id, "month")  # –ø—É—Ç—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ —Å–æ —Å—Ç–∞—Ç–æ–π
        if isinstance(picture, BytesIO):
            # await message.answer("–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü")
            sent_message = await bot.send_photo(chat_id=message.chat.id, photo=picture)

            # message_id = await database.getMessageId(user_id, "stat_month")
            # if message_id is not None:
            #     try:
            #         await bot.delete_message(chat_id=user_id, message_id=message_id)
            #     except Exception as e:
            #         print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id}: {e}")
            # message_id = sent_message.message_id
            # await database.addMessageId(user_id, "stat_month", message_id)


            picture = None  # –£–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä–µ–∫—Ç –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
        else:
            await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –µ—â–µ –Ω–µ –≤–≤–µ–ª–∏ —Å–º–∞–π–ª–∏–∫–∏ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.")


@dp.message_handler(text=["–í—Å–µ –≤—Ä–µ–º—è"])
async def statisticUserAll(message: types.Message, state: FSMContext):
    user_id = message.from_user.id  # ID —á–∞—Ç–∞
    premium_end = await database.checkPremiumIsEnd(user_id)
    if premium_end:
        await premiumIsEnd(user_id=user_id, state=state)
    else:
        picture = await statistics.analiticData(user_id, "all")  # –ø—É—Ç—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ —Å–æ —Å—Ç–∞—Ç–æ–π
        if isinstance(picture, BytesIO):
            sent_message = await bot.send_photo(chat_id=message.chat.id, photo=picture)

            # message_id = await database.getMessageId(user_id, "stat_alltime")
            # if message_id is not None:
            #     try:
            #         await bot.delete_message(chat_id=user_id, message_id=message_id)
            #     except Exception as e:
            #         print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id}: {e}")
            # message_id = sent_message.message_id
            # await database.addMessageId(user_id, "stat_alltime", message_id)

            picture = None  # –£–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä–µ–∫—Ç –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
        else:
            await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –µ—â–µ –Ω–µ –≤–≤–µ–ª–∏ —Å–º–∞–π–ª–∏–∫–∏ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.")


def show_fake_inline_button(emoji_list, selected_emojis=[], date_offset=0):
    """ –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö,
        –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∑–∞ –¥–µ–Ω—å.

        –¢–∞–∫–∂–µ, –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è –¥–∞—Ç—ã –≤ –≤–∏–¥–µ —Å—Ç—Ä–µ–ª–æ–∫. """
    buttons = [InlineKeyboardButton(emoji + "‚úÖ" if emoji in selected_emojis else emoji, callback_data="fake_buttons")
               for emoji in emoji_list]
    button1 = InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"fake_left_arrow_{date_offset}")
    button2 = InlineKeyboardButton("‚û°Ô∏è", callback_data=f"fake_right_arrow_{date_offset}")

    keyboard = InlineKeyboardMarkup(row_width=5)
    keyboard.add(*buttons)
    keyboard.row(button1, button2)

    return keyboard


@dp.callback_query_handler(text="fake_buttons")
async def fake_inline_button_functions(callback_query: types.CallbackQuery):
    """–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è —Ñ–µ–π–∫ –∫–Ω–æ–ø–æ–∫ —Å–æ —Å–º–∞–π–ª–∏–∫–∞–º–∏.
       –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∑–¥–µ—Å—å –≤—ã–±–æ—Ä –º–µ–Ω—è—Ç—å –Ω–µ–ª—å–∑—è"""
    await callback_query.answer("–ó–¥–µ—Å—å —Å–º–∞–π–ª—ã –∏–∑–º–µ–Ω—è—Ç—å –Ω–µ–ª—å–∑—è!")


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith(
    "fake_left_arrow_"))  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ "fake_left_arrow_" –≤ –∫–æ–ª–±–µ–∫–µ
async def fake_left_arrow(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è –¥–∞—Ç—ã –≤–ª–µ–≤–æ.
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ –¥–∞—Ç—ã –∏–∑ callback_query.data
    date_offset = int(callback_query.data.split("_")[-1])
    # –£–º–µ–Ω—å—à–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ –Ω–∞ 1 –¥–µ–Ω—å
    new_date_offset = date_offset - 1
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å–º–µ—â–µ–Ω–∏–µ–º
    await update_message_with_offset(callback_query.message, state, new_date_offset, callback_query.from_user.id)


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith("fake_right_arrow_"))
async def fake_right_arrow(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è –¥–∞—Ç—ã –≤–ø—Ä–∞–≤–æ.
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ –¥–∞—Ç—ã –∏–∑ callback_query.data
    date_offset = int(callback_query.data.split("_")[-1])
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ –Ω–∞ 1 –¥–µ–Ω—å
    new_date_offset = date_offset + 1
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å–º–µ—â–µ–Ω–∏–µ–º
    await update_message_with_offset(callback_query.message, state, new_date_offset, callback_query.from_user.id)


async def update_message_with_offset(message: types.Message, state: FSMContext, date_offset: int, user_id: int):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    """
    # –ø–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã message_id

    msg_id = await database.getMessageId(user_id, "stat_day")

    smile_list = smileys + await database.getPersonalSmiles(user_id)

    async def pastPicture():
        """
        –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
        """
        picture = pictureNoData.createPictureNoData(user_id, new_date)
        input_media = InputMediaPhoto(media=picture)

        await bot.edit_message_media(
            chat_id=user_id,
            message_id=msg_id,
            media=input_media,
            reply_markup=show_fake_inline_button(smile_list, date_offset=date_offset)
        )
        picture = None  # –£–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä–µ–∫—Ç –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å


    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ
    new_date = str(date.today() + timedelta(days=date_offset))

    """ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –¥–Ω—é –≤ –±–∞–∑–µ 
    –∏ –ø—Ä–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –∏–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ """
    try:
        userSmiles = await database.getSmileInfo(user_id, new_date)
        picture = await statistics.analiticData(user_id, "day", new_date)  # –ø—É—Ç—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ —Å–æ —Å—Ç–∞—Ç–æ–π
        if isinstance(picture, BytesIO):
            input_media = InputMediaPhoto(media=picture)

            await bot.edit_message_media(
                chat_id=user_id,
                message_id=msg_id,
                media=input_media,
                reply_markup=show_fake_inline_button(smile_list, userSmiles, date_offset)
            )
            picture = None  # –£–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä–µ–∫—Ç –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
        else:
            await pastPicture()
    except KeyError:
        await pastPicture()


# -----------------------------------------------------------------------------------------------------------------------
"""–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–º–∞–π–ª–∏–∫–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ –≤—ã–±–æ—Ä–∞"""


# -----------------------------------------------------------------------------------------------------------------------


@dp.message_handler(text=["–î–æ–±–∞–≤–∏—Ç—å —Å–º–∞–π–ª–∏–∫"])
async def addSmileToMenu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=show_button(buttons_addSmileToMenu))


@dp.message_handler(text=["–î–æ–±–∞–≤–∏—Ç—å"])
async def addSmile(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    premium_end = await database.checkPremiumIsEnd(user_id)
    if premium_end:
        await premiumIsEnd(user_id=user_id, state=state)
    else:
        personal_smiles = await database.getPersonalSmiles(message.from_user.id)
        if len(personal_smiles) < 10:
            await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–º–∞–π–ª–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å. –ü—Ä–µ–º–∏—É–º —Å–º–∞–π–ª–∏–∫–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–µ–ª—å–∑—è.",
                                 reply_markup=show_button(["–í–µ—Ä–Ω—É—Ç—å—Å—è"]))
            await UserState.personal_smile_add.set()
            await database.setUserState(message.from_user.id, 'personal_smile_add')
        else:
            await message.answer("–í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–∞–π–ª–∏–∫–æ–≤ - 10. "
                                 "–í—ã –º–æ–∂–µ—Ç–µ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –º–µ—Å—Ç–æ, —É–¥–∞–ª–∏–≤ –æ–¥–∏–Ω –∏–∑ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–º–∞–π–ª–∏–∫–æ–≤.")


@dp.message_handler(state=UserState.personal_smile_add)
async def addPersonalSmile(message: types.Message, state: FSMContext):
    personal_smile = ""
    user_id = message.from_user.id
    smile_list = smileys + await database.getPersonalSmiles(user_id)

    if message.sticker:
        personal_smile = message.sticker.emoji
    elif message.text:
        personal_smile = message.text

    if len(personal_smile) == 1 and contains_emojis(personal_smile):
        if personal_smile in smile_list:
            await message.answer(f"{personal_smile} - —Ç–∞–∫–æ–π —Å–º–∞–π–ª–∏–∫ —É–∂–µ –µ—Å—Ç—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.")
        else:
            await message.answer(f"–°–º–∞–π–ª {personal_smile} –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ")
            await database.addPersonalSmiles(user_id, personal_smile)
            await state.set_state(None)
            await database.setUserState(user_id, None)
            await message.answer('–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç', reply_markup=show_button(buttons_menu))
    elif personal_smile == '–í–µ—Ä–Ω—É—Ç—å—Å—è':
        await state.set_state(None)
        await database.setUserState(user_id, None)
        await message.answer('–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç', reply_markup=show_button(buttons_menu))
    elif len(personal_smile) > 1 and contains_emojis(personal_smile):
        await message.answer(
            "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥! \n–ü–æ—Ö–æ–∂–µ, –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–º–∞–π–ª–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö "
            "—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö. \n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–í–µ—Ä–Ω—É—Ç—å—Å—è'.", reply_markup=show_button(["–í–µ—Ä–Ω—É—Ç—å—Å—è"]))
    else:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥! \n–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–º–∞–π–ª–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å "
                             "–¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö, –∏–ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ç–µ–∫—Å—Ç. \n"
                             "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–í–µ—Ä–Ω—É—Ç—å—Å—è'.", reply_markup=show_button(["–í–µ—Ä–Ω—É—Ç—å—Å—è"]))


@dp.message_handler(text=["–£–¥–∞–ª–∏—Ç—å"])
async def deleteSmile(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    premium_end = await database.checkPremiumIsEnd(user_id)
    if premium_end:
        await premiumIsEnd(user_id=user_id, state=state)
    else:
        personal_smiles = await database.getPersonalSmiles(message.from_user.id)
        if len(personal_smiles) > 0:
            await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–º–∞–π–ª–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.", reply_markup=show_button(["–í–µ—Ä–Ω—É—Ç—å—Å—è"]))
            await UserState.personal_smile_remove.set()
            await database.setUserState(message.from_user.id, 'personal_smile_remove')
        else:
            await message.answer("–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–º–∞–π–ª–∏–∫–∞. "
                                 "–ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–º–∞–π–ª–∏–∫–∏.")


@dp.message_handler(state=UserState.personal_smile_remove)
async def deletePersonalSmile(message: types.Message, state: FSMContext):
    personal_smile = ""
    user_id = message.from_user.id
    smile_list = await database.getPersonalSmiles(user_id)

    if message.sticker:
        personal_smile = message.sticker.emoji
    elif message.text:
        personal_smile = message.text

    if len(personal_smile) == 1 and contains_emojis(personal_smile):
        if personal_smile in smileys:
            await message.answer(f"{personal_smile} - —ç—Ç–æ—Ç —Å–º–∞–π–ª–∏–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞, "
                                 f"–µ–≥–æ –Ω–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.", reply_markup=show_button(["–í–µ—Ä–Ω—É—Ç—å—Å—è"]))
        elif not personal_smile in smile_list:
            await message.answer(
                f"{personal_smile} - —ç—Ç–æ–≥–æ —Å–º–∞–π–ª–∏–∫–∞ –Ω–µ—Ç –≤ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞–º–∏ —Å–º–∞–π–ª–∏–∫–∞—Ö. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.",
                reply_markup=show_button(["–í–µ—Ä–Ω—É—Ç—å—Å—è"]))
        else:
            await message.answer(f"–°–º–∞–π–ª {personal_smile} —É–¥–∞–ª–µ–Ω ‚úÖ")
            await database.removePersonalSmile(user_id, personal_smile)
            await state.set_state(None)
            await database.setUserState(user_id, None)
            await message.answer('–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç', reply_markup=show_button(buttons_menu))
    elif personal_smile == '–í–µ—Ä–Ω—É—Ç—å—Å—è':
        await state.set_state(None)
        await database.setUserState(user_id, None)
        await database.setUserState(user_id, None)
        await message.answer('–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç', reply_markup=show_button(buttons_menu))
    else:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–º–∞–π–ª–∏–∫.\n"
                             "–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–º–∞–π–ª, —Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ: '–í–µ—Ä–Ω—É—Ç—å—Å—è'",
                             reply_markup=show_button(["–í–µ—Ä–Ω—É—Ç—å—Å—è"]))


# -----------------------------------------------------------------------------------------------------------------------
"""–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Ä—Ç—Ä–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é chatGPT"""


# -----------------------------------------------------------------------------------------------------------------------


@dp.message_handler(text=["–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—Ç—Ä–µ—Ç"])
async def generationPortrait(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    is_premium = await database.checkPremiumUser(message.from_user.id)
    premium_end = await database.checkPremiumIsEnd(user_id)
    if is_premium and not premium_end:
        await message.answer("–í—ã–±–µ—Ä–∏ –∑–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ —Ç—ã —Ö–æ—á–µ—à—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç.",
                             reply_markup=show_button(["–ó–∞ –¥–µ–Ω—å", "–ó–∞ –Ω–µ–¥–µ–ª—é", "–í–µ—Ä–Ω—É—Ç—å—Å—è"]))
    elif is_premium and premium_end:
        await premiumIsEnd(user_id=user_id, state=state)
    else:
        await message.answer(
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä—Ç—Ä–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é chatGPT –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=show_button(premium_list_default))


@dp.message_handler(text=["–ó–∞ –¥–µ–Ω—å"])
async def generationPortraitDay(message: types.Message, state: FSMContext):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç chatGPT –∑–∞ –¥–µ–Ω—å. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–≤–æ–¥–∏–ª —Å–º–∞–π–ª–∏–∫–∏
    —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –≤—ã–∑—ã–≤–∞–ª –∫–æ–º–∞–Ω–¥—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Ä—Ç—Ä–µ—Ç–∞ –±–æ–ª–µ–µ 2 —Ä–∞–∑, —Ç–æ –æ–Ω –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è.
    """
    user_id = message.from_user.id
    is_premium = await database.checkPremiumUser(user_id)
    premium_end = await database.checkPremiumIsEnd(user_id)
    if is_premium and not premium_end:
        if await database.getUsedGPT(user_id) < 2:
            try:
                smiles = await database.getSmileInfo(user_id, str(date.today()))
                smiles = ", ".join(smiles)
                await message.answer("–ü–æ—Ä—Ç—Ä–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
                                     reply_markup=types.ReplyKeyboardRemove())
                portrait = await database.getExistingPortrait(smiles, "day")
                if portrait == "NotExist":
                    portrait = await chatGPT.create_psychological_portrait_day(", ".join(smiles))
                    await database.addPortrait(smiles, portrait, "day")
                await message.answer(portrait, reply_markup=show_button(buttons_menu))
                await database.addUsedGPT(user_id)
            except KeyError:
                await message.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–º–∞–π–ª–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.",
                                     reply_markup=show_button(buttons_menu))
        else:
            await message.answer(
                "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—Ç—Ä–µ—Ç –∑–∞–≤—Ç—Ä–∞")
    elif is_premium and premium_end:
        await premiumIsEnd(user_id=user_id, state=state)


@dp.message_handler(text=["–ó–∞ –Ω–µ–¥–µ–ª—é"])
async def generationPortraitWeek(message: types.Message, state: FSMContext):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç chatGPT –∑–∞ –Ω–µ–¥–µ–ª—é. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–≤–æ–¥–∏–ª —Å–º–∞–π–ª–∏–∫–∏
    —Ö–æ—Ç—è –±—ã 7 –¥–Ω–µ–π –∏–ª–∏ –≤—ã–∑—ã–≤–∞–ª —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –±–æ–ª–µ–µ 2 —Ä–∞–∑, —Ç–æ –ø–æ—Ä—Ç—Ä–µ—Ç –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è.
    """
    user_id = message.from_user.id
    is_premium = await database.checkPremiumUser(user_id)
    premium_end = await database.checkPremiumIsEnd(user_id)
    if is_premium and not premium_end:
        if await database.getUsedGPT(user_id) < 2:

            smilesDict = await database.getSmileInfo(user_id, "all")
            count = statistics.day_counter(7, smilesDict)
            if count <= 1:
                await message.answer("–°–ª–∏—à–∫–æ–º –º–∞–ª–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ä—Ç—Ä–µ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Å–º–∞–π–ª–∏–∫"
                                     , reply_markup=show_button(buttons_menu))
            else:
                await message.answer("–ü–æ—Ä—Ç—Ä–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
                                     reply_markup=types.ReplyKeyboardRemove())
                smilesDict = converting_dates_to_days(dict(list(smilesDict.items())[-count:]))
                smiles = '\n'.join('{}: {}'.format(key, val) for key, val in smilesDict.items())  # –°–ª–æ–≤–∞—Ä—å –≤ —Å—Ç—Ä–æ–∫—É

                portrait = await database.getExistingPortrait(smiles, "week")
                if portrait == "NotExist":
                    portrait = await chatGPT.create_psychological_portrait_week(", ".join(smiles))
                    await database.addPortrait(smiles, portrait, "week")
                await message.answer(f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∫–æ–≥–¥–∞ –≤—ã –≤—ã–±–∏—Ä–∞–ª–∏ —Å–º–∞–π–ª–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:{count}</b> \n\n {portrait}', reply_markup=show_button(buttons_menu), parse_mode="HTML")
                await database.addUsedGPT(user_id)
        else:
            await message.answer(
                "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—Ç—Ä–µ—Ç –∑–∞–≤—Ç—Ä–∞")
    elif is_premium and premium_end:
        await premiumIsEnd(user_id=user_id, state=state)


# -----------------------------------------------------------------------------------------------------------------------
"""–û—Å—Ç–∞–ª—å–Ω—ã–µ"""


# -----------------------------------------------------------------------------------------------------------------------


def show_button(list_menu):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –≤ –∫–Ω–æ–ø–∫–∏"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*list_menu)
    return keyboard


def show_inline_button(emoji_list, selected_emojis=[]):
    buttons = [InlineKeyboardButton(emoji + "‚úÖ" if emoji in selected_emojis
                                    else emoji, callback_data=emoji) for emoji in emoji_list]
    return InlineKeyboardMarkup(row_width=5).add(*buttons)


def add_checkmark(lst, variable):
    return [elem + "‚úÖ" if elem == variable else elem for elem in lst]


@dp.message_handler(text=["–í—ã–±—Ä–∞—Ç—å —Å–º–∞–π–ª–∏–∫"])
async def show_emoji(message: types.Message):
    emoji_list = smileys + await database.getPersonalSmiles(message.from_user.id)
    prevSmileMsg = await database.getPrevSmileMsgID(message.from_user.id)
    smileListToDay = ''
    if prevSmileMsg is not None:
        await delMessage(message.chat.id, prevSmileMsg)
        smileListToDay = await database.getSmileInfo(message.from_user.id, str(date.today()))
        for i in smileListToDay:
            emoji_list = add_checkmark(emoji_list, i)

    smile_msg = await message.reply(f'<b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–º–∞–π–ª–∏–∫–∏:</b>\n{"".join(smileListToDay)}',
                                    reply_markup=show_inline_button(emoji_list), parse_mode="HTML")

    await database.updateSmileMsgID(message.from_user.id, smile_msg["message_id"])


@dp.callback_query_handler()
async def button(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    limit_end = await database.emojiLimitExpired(user_id)
    is_premium = await database.checkPremiumUser(user_id)
    premium_end = await database.checkPremiumIsEnd(user_id)
    if is_premium and premium_end:
        await premiumIsEnd(user_id=user_id, state=state)
    elif limit_end and not is_premium:
        prevSmileMsg = await database.getPrevSmileMsgID(user_id)
        if prevSmileMsg is not None:
            await delMessage(callback_query.message.chat.id, prevSmileMsg)
        await set_state(user_id, state=state)

    else:
        # –õ–∏—Å—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Å–º–∞–π–ª–∏–∫–∞–º–∏ –∑–∞ –¥–µ–Ω—å
        selected_emojis = await database.getSmileInfo(user_id, str(date.today()))
        selected_emoji = callback_query.data

        if '‚úÖ' in selected_emoji:
            selected_emoji = selected_emoji.removesuffix('‚úÖ')
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–º–∞–π–ª–∏–∫ —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
        if selected_emoji not in selected_emojis:
            # –ï—Å–ª–∏ —Å–º–∞–π–ª–∏–∫–∞ –µ—â–µ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            selected_emojis.append(selected_emoji)
            await callback_query.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–º–∞–π–ª–∏–∫ ‚úÖ")
            await database.addEmojiUsed(callback_query.from_user.id)
        else:
            # –ï—Å–ª–∏ —Å–º–∞–π–ª–∏–∫ —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö, —É–¥–∞–ª—è–µ–º –µ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ —Å–Ω–æ–≤–∞ –≤—ã–±—Ä–∞—Ç—å
            selected_emojis.remove(selected_emoji)
            await callback_query.answer("–°–º–∞–π–ª–∏–∫ —Å–Ω—è—Ç ‚ùå")

        print(selected_emojis)
        await database.addOrChangeSmile(callback_query.from_user.id, str(date.today()), selected_emojis)

        emoji_list = smileys + await database.getPersonalSmiles(user_id)
        await callback_query.message.edit_text(
            "–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–º–∞–π–ª–∏–∫–∏:\n" + "".join(
                selected_emojis) if selected_emojis else "–í—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–º–∞–π–ª–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç",
            reply_markup=show_inline_button(emoji_list, selected_emojis)
        )


async def set_state(user_id, state: FSMContext):
    await state.set_state(UserState.limit_is_over.state)
    await database.setUserState(user_id, 'limit_is_over')
    await bot.send_message(user_id, '–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–≤–æ–π –ª–∏–º–∏—Ç –≤ 100 —Å–º–∞–π–ª–∏–∫–æ–≤, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ '
                                    '–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ premium –ø–æ–¥–ø–∏—Å–∫—É, –≤—ã–±–µ—Ä–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏',
                           reply_markup=show_button(premium_list_state))


@dp.message_handler(commands=['admin'])
async def admin(message: types.Message):
    if message.from_user.id in config.ADMIN_ID:
        await message.answer('–í—ã–ø–æ–ª–Ω–µ–Ω –≤—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', reply_markup=show_button(admin_menu))


@dp.message_handler(text=["–ö–æ–ª-–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é"])
async def stat_new_week(message: types.Message):
    if message.from_user.id in config.ADMIN_ID:
        await message.answer(f'–ö–æ–ª-–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é: {await database.getCountNewUsers()}',
                             reply_markup=show_button(admin_menu))


@dp.message_handler(text=["–û–±—â–µ–µ –∫–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"])
async def stat_all(message: types.Message):
    if message.from_user.id in config.ADMIN_ID:
        await message.answer(f'–û–±—â–µ–µ –∫–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {await database.getCountAllUsers()}',
                             reply_markup=show_button(admin_menu))


@dp.message_handler(text=["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å"])
async def stat_day(message: types.Message):
    if message.from_user.id in config.ADMIN_ID:
        info = await database.getStatAdmin(1)
        await message.answer(f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å: \n{" ".join(info)}', reply_markup=show_button(admin_menu))


@dp.message_handler(text=["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é"])
async def stat_week(message: types.Message):
    if message.from_user.id in config.ADMIN_ID:
        info = await database.getStatAdmin(7)
        await message.answer(f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é: \n{" ".join(info)}', reply_markup=show_button(admin_menu))


@dp.message_handler(text=["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü"])
async def stat_month(message: types.Message):
    if message.from_user.id in config.ADMIN_ID:
        info = await database.getStatAdmin(30)
        await message.answer(f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü: \n{" ".join(info)}', reply_markup=show_button(admin_menu))


@dp.message_handler(text=["–í—ã–π—Ç–∏"])
async def admin_exit(message: types.Message):
    if message.from_user.id in config.ADMIN_ID:
        await message.reply('–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏', reply_markup=show_button(buttons_menu))


@dp.pre_checkout_query_handler(lambda query: True)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message, state: FSMContext):
    print("SUCCESSFUL PAYMENT")

    prevInvoiceMsg = await database.getPrevInvoiceMsgID(message.chat.id)
    if prevInvoiceMsg is not None:
        await delMessage(message.chat.id, prevInvoiceMsg)

    await state.set_state(None)
    await database.setUserState(message.from_user.id, None)
    payment_info = message.successful_payment.to_python()
    for k, v in payment_info.items():
        print(f"{k}={v}")

    await message.answer(
        "–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {:.2f} {} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ".format(float(message.successful_payment.total_amount) / 100,
                                                          message.successful_payment.currency),
        reply_markup=show_button(buttons_menu))

    current_date = datetime.today()

    if message.successful_payment.total_amount / 100 == 100:
        data_end = current_date + timedelta(days=31)
    elif message.successful_payment.total_amount / 100 == 200:
        data_end = current_date + timedelta(days=182)
    else:
        data_end = current_date + timedelta(days=365)

    await database.premiumStatus(message.from_user.id, str(data_end.date()))

    await message.answer(await database.infoPremiumUser(message.from_user.id))


async def delMessage(chat_id: int, msgID: int):
    try:
        await bot.delete_message(chat_id, msgID)
    except MessageToDeleteNotFound:
        pass
    except MessageCantBeDeleted:
        pass


async def premiumIsEnd(user_id: int, state: FSMContext):
    await state.set_state(UserState.limit_is_over.state)
    await database.setUserState(user_id, 'limit_is_over')
    await database.removePremiumStatus(user_id)
    await bot.send_message(chat_id=user_id,
                           text="–°—Ä–æ–∫ –≤–∞—à–µ–π –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–¥–æ—à—ë–ª –∫ –∫–æ–Ω—Ü—É, –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ "
                                "–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É", reply_markup=show_button(premium_list_state))


async def setUserStateFromDB():
    UserStates = await database.getUsersState()
    if UserStates is not None:
        for key, value in UserStates.items():
            state_obj = dp.current_state(chat=key, user=key)
            if value == "limit_is_over":
                state_to_set = UserState.limit_is_over
                await state_obj.set_state(state_to_set)
                print(f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ limit_is_over –¥–ª—è {key}')
            elif value == "personal_smile_add":
                state_to_set = UserState.personal_smile_add
                await state_obj.set_state(state_to_set)
                print(f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ personal_smile_add –¥–ª—è {key}')
            elif value == "personal_smile_remove":
                state_to_set = UserState.personal_smile_remove
                await state_obj.set_state(state_to_set)
                print(f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ personal_smile_remove –¥–ª—è {key}')
            elif value == "None":
                state_to_set = None
                await state_obj.set_state(None)


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        skip_updates=False,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )

    dp.register_message_handler(show_emoji)
    dp.register_callback_query_handler(button)
