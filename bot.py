import logging
import os
from datetime import date

import calendar
from aiogram.types.message import ContentType
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from aiogram.utils.executor import start_webhook
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from aiogram import Bot, types

from tgbot.utiles.Statistics import statistics
from tgbot.utiles import database
from config import config

bot = Bot(token=config.BOT_TOKEN.get_secret_value())
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

WEBHOOK_HOST = config.WEBHOOK_HOST
WEBHOOK_PATH = f'/webhook/{config.BOT_TOKEN.get_secret_value()}'
WEBHOOK_URL = f'{WEBHOOK_HOST}{WEBHOOK_PATH}'

WEBAPP_HOST = config.WEBAPP_HOST
WEBAPP_PORT = config.WEBAPP_PORT


async def on_startup(dispatcher):
    await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)


async def on_shutdown(dispatcher):
    await bot.delete_webhook()


class UserState(StatesGroup):
    limit_is_over = State()


smileys = [
    "üòä", "üòÄ", "ü§™", "üòç", "üòÖ",
    "üòÜ", "üòâ", "üòå", "üòé", "üòè",
    "ü§î", "üòí", "üòî", "üòï", "üòñ",
    "ü§¢", "üòü", "üò†", "üò°", "üò¢",
    "üò£", "üò•", "üò™", "üò´", "üò¥"]

"""—Å–ø–∏—Å–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫"""
buttons_menu = ["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–í—ã–±—Ä–∞—Ç—å —Å–º–∞–π–ª–∏–∫", "–ü—Ä–µ–º–∏—É–º"]

buttons_stat = ["–î–µ–Ω—å", "–ù–µ–¥–µ–ª—è", "–ú–µ—Å—è—Ü", "–í—Å–µ –≤—Ä–µ–º—è", "–í–µ—Ä–Ω—É—Ç—å—Å—è"]
admin_menu = ["–ö–æ–ª-–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é", "–û–±—â–µ–µ –∫–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å",
              "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü", "–í—ã–π—Ç–∏"]

premium_list_default = ["1 –º–µ—Å—è—Ü", "6 –º–µ—Å—è—Ü–µ–≤", "1 –≥–æ–¥", "–í–µ—Ä–Ω—É—Ç—å—Å—è"]
premium_list_state = ["1 –º–µ—Å—è—Ü", "6 –º–µ—Å—è—Ü–µ–≤", "1 –≥–æ–¥"]


async def send_invoice(chat_id, time, price):
    PRICE = types.LabeledPrice(label=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {time}", amount=price * 100)

    await bot.send_invoice(
        chat_id=chat_id,
        title='Premium Happy.do',
        description=f'–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {time}',
        provider_token=config.PAYMENTS_TOKEN.get_secret_value(),
        currency="rub",
        photo_url="https://info.sibnet.ru/ni/629/629577w_1669101196.jpg",
        photo_width=416,
        photo_height=234,
        photo_size=416,
        is_flexible=False,
        prices=[PRICE],
        start_parameter="",
        payload="test-invoice-payload"
    )


@dp.message_handler(text=["–ü—Ä–µ–º–∏—É–º"])
async def premium(message: types.Message):
    await message.reply('–í—ã–±–µ—Ä–∏ –Ω–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–º–∏—É–º', reply_markup=show_button(premium_list_default))


@dp.message_handler(text=['1 –º–µ—Å—è—Ü', '6 –º–µ—Å—è—Ü–µ–≤', '1 –≥–æ–¥'])
@dp.message_handler(state=UserState.limit_is_over)
async def buy(message: types.Message, time='1 –≥–æ–¥', price=500):
    if message.text == '1 –º–µ—Å—è—Ü':
        await send_invoice(message.chat.id, '1 –º–µ—Å—è—Ü', price=100)
    elif message.text == '6 –º–µ—Å—è—Ü–µ–≤':
        await send_invoice(message.chat.id, '6 –º–µ—Å—è—Ü–µ–≤', price=200)
    elif message.text == '1 –≥–æ–¥':
        await send_invoice(message.chat.id, '1 –≥–æ–¥', price=500)

        
@dp.message_handler(state=UserState.limit_is_over)
async def buy_premium(message: types.Message):
    await message.answer('–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫—É–ø–∏ –ø–æ–¥–ø–∏—Å–∫—É')


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!')
    user_exists = await database.checkUser(message.from_user.id)
    if not user_exists:
        await database.createUser(message.from_user.id, message.from_user.username)
    await message.answer('–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç', reply_markup=show_button(buttons_menu))


@dp.message_handler(text=["–í–µ—Ä–Ω—É—Ç—å—Å—è"])
async def statisticUserBack(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç', reply_markup=show_button(buttons_menu))


@dp.message_handler(text=["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])
async def statisticUser(message: types.Message):
    user_id = message.from_user.id  # ID —á–∞—Ç–∞
    await message.answer('–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?', reply_markup=show_button(buttons_stat))


@dp.message_handler(text=["–î–µ–Ω—å"])
async def statisticUserDay(message: types.Message):
    user_id = message.from_user.id  # ID —á–∞—Ç–∞
    userSmiles = database.getSmileInfo(user_id, str(date.today()))
    new_emoji_list = add_checkmark(smileys, userSmiles)
    pathToPicture = await statistics.analiticData(user_id, "day", str(date.today()))  # –ø—É—Ç—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ —Å–æ —Å—Ç–∞—Ç–æ–π
    if pathToPicture != "absent":
        await message.answer("–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å")
        photo = InputFile(pathToPicture)
        await bot.send_photo(chat_id=message.chat.id, photo=photo, reply_markup=show_inline_button(new_emoji_list))
        os.remove(pathToPicture)  # —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
    else:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –µ—â–µ –Ω–µ –≤–≤–µ–ª–∏ —Å–º–∞–π–ª–∏–∫–∏ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.")


@dp.message_handler(text=["–ù–µ–¥–µ–ª—è"])
async def statisticUserWeek(message: types.Message):
    user_id = message.from_user.id  # ID —á–∞—Ç–∞
    pathToPicture = await statistics.analiticData(user_id, "week")  # –ø—É—Ç—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ —Å–æ —Å—Ç–∞—Ç–æ–π
    if pathToPicture != "absent":
        await message.answer("–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é")
        photo = InputFile(pathToPicture)
        await bot.send_photo(chat_id=message.chat.id, photo=photo)
        os.remove(pathToPicture)  # —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
    else:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –µ—â–µ –Ω–µ –≤–≤–µ–ª–∏ —Å–º–∞–π–ª–∏–∫–∏ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.")


@dp.message_handler(text=["–ú–µ—Å—è—Ü"])
async def statisticUserMonth(message: types.Message):
    user_id = message.from_user.id  # ID —á–∞—Ç–∞
    pathToPicture = await statistics.analiticData(user_id, "month")  # –ø—É—Ç—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ —Å–æ —Å—Ç–∞—Ç–æ–π
    if pathToPicture != "absent":
        await message.answer("–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü")
        photo = InputFile(pathToPicture)
        await bot.send_photo(chat_id=message.chat.id, photo=photo)
        os.remove(pathToPicture)  # —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
    else:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –µ—â–µ –Ω–µ –≤–≤–µ–ª–∏ —Å–º–∞–π–ª–∏–∫–∏ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.")


@dp.message_handler(text=["–í—Å–µ –≤—Ä–µ–º—è"])
async def statisticUserAll(message: types.Message):
    user_id = message.from_user.id  # ID —á–∞—Ç–∞
    pathToPicture = await statistics.analiticData(user_id, "all")  # –ø—É—Ç—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ —Å–æ —Å—Ç–∞—Ç–æ–π
    if pathToPicture != "absent":
        await message.answer("–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è")
        photo = InputFile(pathToPicture)
        await bot.send_photo(chat_id=message.chat.id, photo=photo)
        os.remove(pathToPicture)  # —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
    else:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –µ—â–µ –Ω–µ –≤–≤–µ–ª–∏ —Å–º–∞–π–ª–∏–∫–∏ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.")


def show_button(list_menu):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –≤ –∫–Ω–æ–ø–∫–∏"""
    """—Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–µ–Ω—é"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*list_menu)
    return keyboard


# def show_inline_button(list_emoji):
#     """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –≤ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏"""
#     keyboard = InlineKeyboardMarkup(row_width=5)
#     buttons = [InlineKeyboardButton(smiley, callback_data=smiley) for smiley in list_emoji]
#     keyboard.add(*buttons)
#     return keyboard


def show_inline_button(emoji_list, selected_emojis=[]):
    buttons = []
    for emoji in emoji_list:
        if emoji in selected_emojis:
            button_text = emoji + "‚úÖ"
        else:
            button_text = emoji
        buttons.append(InlineKeyboardButton(button_text, callback_data=emoji))
    return InlineKeyboardMarkup(row_width=5).add(*buttons)


def add_checkmark(lst, variable):
    return [elem + "‚úÖ" if elem == variable else elem for elem in lst]


@dp.message_handler(text=["–í—ã–±—Ä–∞—Ç—å —Å–º–∞–π–ª–∏–∫"])
async def show_emoji(message: types.Message):
    await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–∞–π–ª–∏–∫:', reply_markup=show_inline_button(smileys))


# @dp.callback_query_handler()
# async def button(callback_query: types.CallbackQuery, state: FSMContext):
#     query = callback_query
#     await query.answer()
#     new_emoji_list = add_checkmark(smileys, query.data)
#     await bot.answer_callback_query(callback_query.id)
#     await query.message.edit_text('–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–º–∞–π–ª–∏–∫ ‚úÖ', reply_markup=show_inline_button(new_emoji_list))
#     await database.addEmojiUsed(callback_query.from_user.id)
#     date_day = str(date.today())
#     await database.addOrChangeSmile(callback_query.from_user.id, date_day, query.data)
#
#     limit_end = await database.emojiLimitExpired(callback_query.from_user.id)
#     if limit_end:
#         await state.set_state(UserState.limit_is_over.state)
#         await callback_query.message.answer('–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫—É–ø–∏ –ø–æ–¥–ø–∏—Å–∫—É')


@dp.callback_query_handler()
async def button(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id

    async with state.proxy() as data:

        if "selected_emojis" not in data:
            data["selected_emojis"] = []

        selected_emojis = data["selected_emojis"]

        selected_emoji = callback_query.data

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–º–∞–π–ª–∏–∫ —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
        if selected_emoji not in selected_emojis:
            # –ï—Å–ª–∏ —Å–º–∞–π–ª–∏–∫–∞ –µ—â–µ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            selected_emojis.append(selected_emoji)
            await callback_query.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–º–∞–π–ª–∏–∫ ‚úÖ")
        else:
            # –ï—Å–ª–∏ —Å–º–∞–π–ª–∏–∫ —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö, —É–¥–∞–ª—è–µ–º –µ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ —Å–Ω–æ–≤–∞ –≤—ã–±—Ä–∞—Ç—å
            selected_emojis.remove(selected_emoji)
            await callback_query.answer("–°–º–∞–π–ª–∏–∫ —Å–Ω—è—Ç ‚ùå")

        data["selected_emojis"] = selected_emojis

        print(selected_emojis)
        await database.addOrChangeSmile(callback_query.from_user.id, str(date.today()), selected_emojis)

        await callback_query.message.edit_text(
            "–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–º–∞–π–ª–∏–∫–∏:\n" + "".join(selected_emojis) if selected_emojis else "–í—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–º–∞–π–ª–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.",
            reply_markup=show_inline_button(smileys, selected_emojis)
        )   


async def set_state(message: types.Message, state: FSMContext):
    await state.set_state(UserState.limit_is_over.state)
    await message.answer(
        '–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–≤–æ–π –ª–∏–º–∏—Ç –≤ 100 —Å–º–∞–π–ª–∏–∫–æ–≤, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ'
        '–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ premium –ø–æ–¥–ø–∏—Å–∫—É, –≤—ã–±–µ—Ä–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏', reply_markup=show_button(premium_list_state))



@dp.message_handler(commands=['admin'])
async def admin(message: types.Message):
    if message.from_user.id == config.ADMIN_ID:
        await message.answer('–í—ã–ø–æ–ª–Ω–µ–Ω –≤—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', reply_markup=show_button(admin_menu))


@dp.message_handler(text=["–ö–æ–ª-–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é"])
async def stat_new_week(message: types.Message):
    if message.from_user.id == config.ADMIN_ID:
        await message.answer(f'–ö–æ–ª-–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é: {await database.getCountNewUsers()}',
                             reply_markup=show_button(admin_menu))


@dp.message_handler(text=["–û–±—â–µ–µ –∫–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤—Ç–µ–ª–µ–π"])
async def stat_all(message: types.Message):
    if message.from_user.id == config.ADMIN_ID:
        await message.answer(f'–û–±—â–µ–µ –∫–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤—Ç–µ–ª–µ–π: {await database.getCountAllUsers()}',
                             reply_markup=show_button(admin_menu))


@dp.message_handler(text=["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å"])
async def stat_day(message: types.Message):
    if message.from_user.id == config.ADMIN_ID:
        info = await database.getStatAdmin(1)
        await message.answer(f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å: \n{info}', reply_markup=show_button(admin_menu))


@dp.message_handler(text=["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é"])
async def stat_week(message: types.Message):
    if message.from_user.id == config.ADMIN_ID:
        info = await database.getStatAdmin(7)
        await message.answer(f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é: \n{" ".join(info)}', reply_markup=show_button(admin_menu))


@dp.message_handler(text=["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü"])
async def stat_month(message: types.Message):
    if message.from_user.id == config.ADMIN_ID:
        info = await database.getStatAdmin(30)
        await message.answer(f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü: {info}', reply_markup=show_button(admin_menu))


@dp.message_handler(text=["–í—ã–π—Ç–∏"])
async def admin_exit(message: types.Message):
    if message.from_user.id == config.ADMIN_ID:
        await message.reply('–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏', reply_markup=show_button(buttons_menu))


@dp.pre_checkout_query_handler(lambda query: True)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message, state: FSMContext):
    print("SUCCESSFUL PAYMENT")
    await state.finish()
    payment_info = message.successful_payment.to_python()
    for k, v in payment_info.items():
        print(f"{k}={v}")


    await bot.send_message(message.chat.id,
                           f"–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100}."
                           f"{message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ",
                           reply_markup=show_button(buttons_menu))


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        skip_updates=False,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )
    dp.register_message_handler(show_emoji)
    dp.register_callback_query_handler(button)
