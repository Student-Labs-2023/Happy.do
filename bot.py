import logging
import os
from datetime import date
import calendar

from aiogram.dispatcher import Dispatcher
from aiogram.utils.executor import start_webhook
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from aiogram import Bot, types

from tgbot.utiles.Statistics import statistics
from tgbot.utiles import database
from config import config

bot = Bot(token=config.BOT_TOKEN.get_secret_value())
dp = Dispatcher(bot)

WEBHOOK_HOST = config.WEBHOOK_HOST
WEBHOOK_PATH = f'/webhook/{config.BOT_TOKEN.get_secret_value()}'
WEBHOOK_URL = f'{WEBHOOK_HOST}{WEBHOOK_PATH}'

WEBAPP_HOST = config.WEBAPP_HOST
WEBAPP_PORT = config.WEBAPP_PORT


async def on_startup(dispatcher):
    await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)


async def on_shutdown(dispatcher):
    await bot.delete_webhook()


smileys = [
    "üòä", "üòÄ", "ü§™", "üòç", "üòÖ",
    "üòÜ", "üòâ", "üòå", "üòé", "üòè",
    "ü§î", "üòí", "üòî", "üòï", "üòñ",
    "ü§¢", "üòü", "üò†", "üò°", "üò¢",
    "üò£", "üò•", "üò™", "üò´", "üò¥"]

"""—Å–ø–∏—Å–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫"""
buttons_menu = ["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–í—ã–±—Ä–∞—Ç—å —Å–º–∞–π–ª–∏–∫"]
admin_menu = ["–ö–æ–ª-–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é", "–û–±—â–µ–µ –∫–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤—Ç–µ–ª–µ–π", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å",
              "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü", "–í—ã–π—Ç–∏"]


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!')
    user_exists = await database.checkUser(str(message.from_user.id))
    if not user_exists:
        await database.createUser(message.from_user.id, message.from_user.username)
    await message.answer('–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç', reply_markup=show_button(buttons_menu))


@dp.message_handler(text=["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])
async def statisticUser(message: types.Message):
    user_id = message.from_user.id  # ID —á–∞—Ç–∞
    pathToPicture = await statistics.analiticData(user_id)  # –ø—É—Ç—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ —Å–æ —Å—Ç–∞—Ç–æ–π
    if pathToPicture != "absent":
        await message.answer("–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é")
        photo = InputFile(pathToPicture)
        await bot.send_photo(chat_id=message.chat.id, photo=photo)
        os.remove(pathToPicture)  # —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
    else:
        await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –í—ã –µ—â–µ –Ω–∏ —Ä–∞–∑—É –Ω–µ –≤–≤–æ–¥–∏–ª–∏ —Å–º–∞–π–ª–∏–∫–∏.")


def show_button(list_menu):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –≤ –∫–Ω–æ–ø–∫–∏"""
    """—Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–µ–Ω—é"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*list_menu)
    return keyboard


def show_inline_button(list_emoji):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –≤ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –∫–Ω–æ–ø–∫–∏"""
    "—Å–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–º–∞–π–ª–∏–∫–æ–≤"
    keyboard = InlineKeyboardMarkup(row_width=5)
    buttons = [InlineKeyboardButton(smiley, callback_data=smiley) for smiley in list_emoji]
    keyboard.add(*buttons)
    return keyboard


def add_checkmark(lst, variable):
    return [elem + "‚úÖ" if elem == variable else elem for elem in lst]


@dp.message_handler(text=["–í—ã–±—Ä–∞—Ç—å —Å–º–∞–π–ª–∏–∫"])
async def show_emoji(message: types.Message):
    await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–∞–π–ª–∏–∫:', reply_markup=show_inline_button(smileys))


@dp.callback_query_handler()
async def button(callback_query: types.CallbackQuery):
    query = callback_query
    await query.answer()
    new_emoji_list = add_checkmark(smileys, query.data)
    await bot.answer_callback_query(callback_query.id)
    await query.message.edit_text('–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–º–∞–π–ª–∏–∫ ‚úÖ', reply_markup=show_inline_button(new_emoji_list))
    date_day = str(date.today())
    await database.addOrChangeSmile(callback_query.from_user.id, date_day, query.data)


@dp.message_handler(commands=['admin'])
async def admin(message: types.Message):
    if message.from_user.id == config.ADMIN_ID:
        await message.answer('–í—ã–ø–æ–ª–Ω–µ–Ω –≤—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', reply_markup=show_button(admin_menu))


@dp.message_handler(text=["–ö–æ–ª-–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é"])
async def stat_new_week(message: types.Message):
    if message.from_user.id == config.ADMIN_ID:
        await message.answer(f'–ö–æ–ª-–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é: {await database.getCountNewUsers()}',
                             reply_markup=show_button(admin_menu))


@dp.message_handler(text=["–û–±—â–µ–µ –∫–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤—Ç–µ–ª–µ–π"])
async def stat_all(message: types.Message):
    if message.from_user.id == config.ADMIN_ID:
        await message.answer(f'–û–±—â–µ–µ –∫–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤—Ç–µ–ª–µ–π: {await database.getCountAllUsers()}',
                             reply_markup=show_button(admin_menu))


@dp.message_handler(text=["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å"])
async def stat_day(message: types.Message):
    if message.from_user.id == config.ADMIN_ID:
        info = await database.getStatAdmin(1)
        await message.answer(f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å: {info}', reply_markup=show_button(admin_menu))


@dp.message_handler(text=["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é"])
async def stat_week(message: types.Message):
    if message.from_user.id == config.ADMIN_ID:
        info = await database.getStatAdmin(7)
        await message.answer(f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é: \n{" ".join(info)}', reply_markup=show_button(admin_menu))


@dp.message_handler(text=["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü"])
async def stat_month(message: types.Message):
    if message.from_user.id == config.ADMIN_ID:
        info = await database.getStatAdmin(30)
        await message.answer(f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü: {info}', reply_markup=show_button(admin_menu))


@dp.message_handler(text=["–í—ã–π—Ç–∏"])
async def admin_exit(message: types.Message):
    if message.from_user.id == config.ADMIN_ID:
        await message.reply('–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏', reply_markup=show_button(buttons_menu))


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        skip_updates=True,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )
    dp.register_message_handler(show_emoji)
    dp.register_callback_query_handler(button)
